//npm install prisma --save-dev

// npm install @prisma/client

//npx prisma init 

// npx prisma migrate dev    // on every change in prisma schema 

//npx prisma db push

//npx prisma studio

// npx prisma generate getUsers.sql    //  getUsers.sql is name of sql file inside prisma folderget



generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql","views"]
  

}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model com {

  co        Int       @id @default(autoincrement())
  com       String    @db.VarChar(100)
  departments department[]
  units      unit[]
  users      Users[]
}

model department {

  de        Int       @id @default(autoincrement())
  com       String    @db.VarChar(100)
  co         Int
  committee com @relation(fields: [co], references: [co], onDelete: Cascade) 
  units     unit[] 
  users     Users[] 
    
}


model unit {

  un        Int       @id @default(autoincrement())
  unit      String    @db.VarChar(100)
      
  co         Int
  de         Int
  committee com @relation(fields: [co], references: [co], onDelete: NoAction,onUpdate: NoAction)  
  departmentName department @relation(fields: [de], references: [de], onDelete: Cascade,onUpdate: NoAction) 
  user       Users[]    
}

model Users {
  id             Int      @id @default(autoincrement())
  userName       String   @db.VarChar(100) 
  empNo          String   @unique
  employeeHireDate  DateTime @db.Date // Ensure the database column is stored as a date only (not timestamp, if supported)


  comcommittee   Int
  userCommittee  com      @relation(fields: [comcommittee], references: [co], onDelete: NoAction, onUpdate: NoAction)

  department     Int
  userDepartment department @relation(fields: [department], references: [de], onDelete: NoAction, onUpdate: NoAction)

  unit           Int
  userUnit       unit     @relation(fields: [unit], references: [un], onDelete: NoAction, onUpdate: NoAction)
  updfUrlsModel  updfUrlsModel[]
  qrCode         String   @db.VarChar(max) 
}


model updfUrlsModel{
id             Int      @id @default(autoincrement())
pdfUrl         String   @db.VarChar(200) 
pdfUrlDate     DateTime @db.Date
userID         Int
userUrl        Users     @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction)

}


model EmployeeModel {
  id    Int    @id @default(autoincrement())
  EMP_NO String @unique
  namefull_emp_name  String
  YEAR_NO   String
  MONTH_NO   String
  CIVIL_NO   String
  ACTIVE   String
  cal_centre_code   String
  INCRDIF    String
  CALSAL   String
  PAIDSAL   String
  sgrade   String
  GradeStep   String
  GRSDED   String
  LSTRND   String
  NXTRND   String
  GRSALW   String
  abs_days   String
  JobGrade   String
  CERT_NM   String
  JOB_NM   String
  ORGSAL   String?
  POST_NM   String?
  deductionModel DeductionModel[]


}


model DeductionModel{
  id    Int    @id @default(autoincrement())
  EMP_NO String 
  DED_NO   String
  DEDCAL   String
  deddifcal   String
  DEDBAL   String
  dedprevdifcal   String
  deductionModelRelation EmployeeModel @relation(fields: [EMP_NO], references: [EMP_NO], onDelete: Cascade)
}



// view EmployeeView {
//   id    Int    @id @default(autoincrement())
//   EMP_NO String
//   namefull_emp_name  String
//   YEAR_NO   String
//   MONTH_NO   String
//   CIVIL_NO   String
//   ACTIVE   String
//   cal_centre_code   String
//   INCRDIF    String
//   CALSAL   String
//   PAIDSAL   String
//   sgrade   String
//   GradeStep   String
//   GRSDED   String
//   LSTRND   String
//   NXTRND   String
//   GRSALW   String
//   abs_days   String
//   JobGrade   String
//   CERT_NM   String
//   JOB_NM   String
//   ORGSAL   String
//   POST_NM   String
//   DED_NO   String
//   DEDCAL   String
//   deddifcal   String
//   DEDBAL   String
//   dedprevdifcal   String
  

// }


















